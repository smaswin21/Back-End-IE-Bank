name: ie-bank-backend

on:
  push:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  # Backend apps
  BACKEND_WEBAPP_DEV: money404-be-dev
  BACKEND_WEBAPP_UAT: money404-be-uat
  BACKEND_WEBAPP_PROD: money404-be-prod
  # Container registry details
  SUBSCRIPTION_ID_DEV: e0b9cada-61bc-4b5a-bd7a-52c606726b3b
  DOCKER_REGISTRY_SERVER_URL_DEV: money404acrdev.azurecr.io
  DOCKER_REGISTRY_SERVER_URL_UAT: money404acruat.azurecr.io
  DOCKER_REGISTRY_SERVER_URL_PROD: money404acrprod.azurecr.io
  IMAGE_NAME_DEV: money404-be-dev
  IMAGE_NAME_UAT: money404-be-uat
  IMAGE_NAME_PROD: money404-be-prod
  KEY_VAULT_SECRET_NAME_ACR_USERNAME: acr-username
  KEY_VAULT_SECRET_NAME_ACR_PASSWORD: acr-password0
  KEY_VAULT_NAME_DEV: money404-kv-dev
  KEY_VAULT_NAME_UAT: money404-kv-uat
  KEY_VAULT_NAME_PROD: money404-kv-prod
  MANAGED_ID_KEYVAULT_KEY: backend-api-app-service-identity

jobs:
  build-dev:
    runs-on: ubuntu-latest
    outputs:
      image-version: ${{ steps.image-version.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8 pytest
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: python -m pytest --cov=iebank_api -v

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Docker registry credentials from Azure Key Vault (DEV)
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "REGISTRY_USERNAME=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_USERNAME }} --vault-name ${{ env.KEY_VAULT_NAME_DEV }} --query value -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_PASSWORD=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_PASSWORD }} --vault-name ${{ env.KEY_VAULT_NAME_DEV }} --query value -o tsv)" >> $GITHUB_ENV

      - name: Login to Docker Registry (DEV)
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Set image version
        id: image-version
        run: echo "version=$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_OUTPUT

      - name: Build and push image (DEV)
        run: |
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:${{ steps.image-version.outputs.version }}
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:latest
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:${{ steps.image-version.outputs.version }}
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:latest

  build-uat:
    runs-on: ubuntu-latest
    outputs:
      image-version: ${{ steps.image-version.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8 pytest
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: python -m pytest --cov=iebank_api -v

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Docker registry credentials from Azure Key Vault (UAT)
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "REGISTRY_USERNAME=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_USERNAME }} --vault-name ${{ env.KEY_VAULT_NAME_UAT }} --query value -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_PASSWORD=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_PASSWORD }} --vault-name ${{ env.KEY_VAULT_NAME_UAT }} --query value -o tsv)" >> $GITHUB_ENV

      - name: Login to Docker Registry (UAT)
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Set image version
        id: image-version
        run: echo "version=$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_OUTPUT

      - name: Build and push image (UAT)
        run: |
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}/${{ env.IMAGE_NAME_UAT }}:${{ steps.image-version.outputs.version }}
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}/${{ env.IMAGE_NAME_UAT }}:latest
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}/${{ env.IMAGE_NAME_UAT }}:${{ steps.image-version.outputs.version }}
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}/${{ env.IMAGE_NAME_UAT }}:latest

  build-prod:
    runs-on: ubuntu-latest
    outputs:
      image-version: ${{ steps.image-version.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8 pytest
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: python -m pytest --cov=iebank_api -v

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Docker registry credentials from Azure Key Vault (PROD)
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "REGISTRY_USERNAME=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_USERNAME }} --vault-name ${{ env.KEY_VAULT_NAME_PROD }} --query value -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_PASSWORD=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_PASSWORD }} --vault-name ${{ env.KEY_VAULT_NAME_PROD }} --query value -o tsv)" >> $GITHUB_ENV

      - name: Login to Docker Registry (PROD)
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.DOCKER_REGISTRY_SERVER_URL_PROD }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Set image version
        id: image-version
        run: echo "version=$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_OUTPUT

      - name: Build and push image (PROD)
        run: |
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL_PROD }}/${{ env.IMAGE_NAME_PROD }}:${{ steps.image-version.outputs.version }}
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL_PROD }}/${{ env.IMAGE_NAME_PROD }}:latest
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL_PROD }}/${{ env.IMAGE_NAME_PROD }}:${{ steps.image-version.outputs.version }}
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL_PROD }}/${{ env.IMAGE_NAME_PROD }}:latest

  deploy-dev:
    if: github.ref != 'refs/heads/main' && github.event_name == 'push'  || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: build-dev
    environment:
      name: 'Development'

    steps:
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App - Dev
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.BACKEND_WEBAPP_DEV }}
          images: ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:${{ needs.build-dev.outputs.image-version }}

  deploy-uat:
    if: github.event.pull_request.base.ref == 'main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: build-uat
    environment:
      name: 'UAT'

    steps:
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App - UAT
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.BACKEND_WEBAPP_UAT }}
          images: ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}/${{ env.IMAGE_NAME_UAT }}:${{ needs.build-uat.outputs.image-version }}








  deploy-prod:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: build-prod
    environment:
      name: 'Production'

    steps:
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App - Prod
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.BACKEND_WEBAPP_PROD }}
          images: ${{ env.DOCKER_REGISTRY_SERVER_URL_PROD }}/${{ env.IMAGE_NAME_PROD }}:${{ needs.build-uat.outputs.image-version }}
